- name: "Cleanup"
  environment: '{{ params }}'
  shell: |
     export AWS_CA_BUNDLE=/opt/bundle.crt
     aws ec2 terminate-instances \
          --instance-ids $(aws ec2 describe-instances \
                            --query 'Reservations[].Instances[].InstanceId' \
                            --filters "Name=tag:ProjectName,Values=AMI-{{ params["ProjectName"] }}" \
                            --output text) || echo "No instance"

- name: 'Create temporary build directory'
  tempfile:
    state: directory
    suffix: build
  register: build_dir 

- name: 'Set build tag'
  set_fact:
    build_tag: 'build-{{ params["ProjectName"] }}.b{{ params["BuildId"] }}'
    ami_dir: '{{ build_dir.path }}/ami'

- name: 'Get current instance metadata'
  ec2_metadata_facts:
  retries: 5
  delay: 10
  register: result
  until: result is not failed

- name: 'Create .ami directory to keep temoprary data'
  file:
    path: '{{ ami_dir }}'
    state: directory
    mode: '0700'
    
- name: 'Pick same AMI as current instance'
  set_fact:
    ami_id: '{{ ansible_ec2_ami_id }}'
    
- debug:
    var: ami_id
    
- name: 'Find AMI-build security group'
  ec2_group_info:
    region: '{{ ansible_ec2_placement_region }}'
    filters:
      group-name: 'AMI-Build-SG'
  register: amibuild_sg
  ignore_errors: True
  
- debug: 
    var: amibuild_sg

- name: 'Create security group for access to this instance'
  ec2_group:
    name: 'AMI-Build-SG'
    description: 'Allow access from build server'
    vpc_id: "{{ hostvars['localhost']['ansible_ec2_network_interfaces_macs_' + hostvars['localhost']['ansible_ec2_mac'].replace(':', '_') + '_vpc_id'] }}"
    region: '{{ ansible_ec2_placement_region }}'
    rules:
      - proto: tcp
        ports:
          - 22
        group_id: "{{ hostvars['localhost']['ansible_ec2_network_interfaces_macs_' + hostvars['localhost']['ansible_ec2_mac'].replace(':', '_') + '_security_group_ids'].split(',')[0] }}"
        rule_desc: 'Allow SSH for building'
  register: ami_sg
  when: amibuild_sg is not defined or amibuild_sg.security_groups | length == 0

- name: 'Set AMI Build security group ID from amibuild_sg'
  set_fact:
    sg_group_id: "{{ amibuild_sg.security_groups[0].group_id }}"
  when: amibuild_sg.security_groups | selectattr("group_id", "defined") | list | length >0

- name: 'Set AMI Build security group ID from ami_sg'
  set_fact:
    sg_group_id: "{{ ami_sg.group_id }}"
  when: "ami_sg is defined and 'group_id' in ami_sg"

- debug:
    var: sg_group_id

- name: 'AMI Creation'
  block:
   - name: 'Delete key pair if exits'
     ec2_key:
       name: '{{ build_tag }}'
       region: '{{ ansible_ec2_placement_region }}'
       state: absent

   - name: 'Create new temporary key pair'
     ec2_key:
       name: '{{ build_tag }}'
       region: '{{ ansible_ec2_placement_region }}'
     register: ec2_key_result

   - debug:
       var: ec2_key_result.msg
 
   - name: 'Save private key'
     copy:
       content: '{{ ec2_key_result.key.private_key }}'
       dest: '{{ ami_dir }}/{{ build_tag }}.pem'
       mode: '0600'
 
   - name: 'Launch temporary instance'
     amazon.aws.ec2_instance:
       network:
         assign_public_ip: true
       region: '{{ ansible_ec2_placement_region }}'
       key_name: '{{ build_tag }}'
       security_group: '{{ sg_group_id }}'
       instance_type: m5.xlarge
       iam_instance_profile: "{{ hostvars['localhost']['ansible_ec2_iam_info_instanceprofilearn'] }}"
       vpc_subnet_id: "{{ hostvars['localhost']['ansible_ec2_network_interfaces_macs_' + hostvars['localhost']['ansible_ec2_mac'].replace(':', '_') + '_subnet_id'] }}"
       image_id: '{{ ami_id }}'
       wait: yes
       wait_timeout: 500
       exact_count: 1
       volumes:
        - device_name: /dev/xvda
          ebs:
            volume_size: 300
            delete_on_termination: true
            encrypted: true
       tags:
         role: '{{ build_tag }}'
         Name: 'AMI-{{ params["ProjectName"] }}-{{ params["BuildId"] }}'
         ProjectName: 'AMI-{{ params["ProjectName"] }}'
     register: ami_instance

   - name: 'Print instance data'
     debug:
       var: ami_instance

   - name: 'Add host to group'
     add_host:
       name: '{{ ami_instance.instances.0.network_interfaces.0.private_ip_address }}'
       groups: 'just_created'
       ansible_connection: 'ssh'
       ansible_ssh_private_key_file: '{{ ami_dir }}/{{ build_tag }}.pem'
       ansible_user: 'ec2-user'

   - name: 'Wait for SSH to be ready {{ ami_instance.instances.0.network_interfaces.0.private_ip_address }}'
     wait_for:
       host: '{{ ami_instance.instances.0.network_interfaces.0.private_ip_address }}'
       port: 22
       search_regex: 'OpenSSH'
       timeout: 300
   - set_fact: 
       /usr/bin/python3
       
   - name: 'Trust new host'
     shell: 'ssh-keyscan -p 22  {{ ami_instance.instances.0.network_interfaces.0.private_ip_address }} > /home/build/.ssh/known_hosts'

   - name: 'Copy certificates and bundle'
     shell: |
        export remote_host={{ ami_instance.instances.0.network_interfaces.0.private_ip_address }}
        export remote_user="ec2-user"
        export remote_key={{ ami_dir }}/{{ build_tag }}.pem
        
        scp -i ${remote_key} -r \
             /opt/cert  \
             ${remote_user}@${remote_host}:/tmp/cert
             
        scp -i ${remote_key} \
             /opt/bundle.crt \
             ${remote_user}@${remote_host}:/tmp/bundle.crt

        ssh -i ${remote_key} \
             ${remote_user}@${remote_host} \
             sudo cp /tmp/cert/* /etc/pki/ca-trust/source/anchors/

        ssh -i ${remote_key} \
             ${remote_user}@${remote_host} \
             sudo mkdir -p /opt/cert
             
        ssh -i ${remote_key} \
             ${remote_user}@${remote_host} \
             sudo cp /tmp/cert/* /opt/cert/

        ssh -i ${remote_key} \
             ${remote_user}@${remote_host} \
             sudo cp /tmp/bundle.crt /opt/bundle.crt         

        ssh -i ${remote_key} \
             ${remote_user}@${remote_host} \
             sudo update-ca-trust extract
             
   - name: 'Execute installation roles'
     include_role:
       name: '{{ install_role }}'
       apply:
         become: true
         delegate_to: '{{ groups.just_created[0] }}'
         vars:
           ansible_python_interpreter: "/usr/bin/python3"

     with_items: '{{ installation_roles }}'
     loop_control:
       loop_var: install_role
     when: installation_roles is defined

   - name: 'Create AMI'
     ec2_ami:
       instance_id: '{{ ami_instance.instances.0.instance_id }}'
       region: '{{ ansible_ec2_placement_region }}'
       state: present
       description: 'This was provisioned for {{ build_tag }}'
       name: '{{ build_tag }}'
       wait: yes
       root_device_name: /dev/sda
     register: amioutput

   - name: 'Add AMI Id to artifacts'
     include_role:
       name: alpha-build-lib/add-artifact
     vars:
       artifact_key: 'AmiId'
       artifact_value: '{{ amioutput.image_id }}'


   - name: 'Print AMI data'
     debug:
       var: amioutput

  always:
    - name: 'Terminate temporary instance'
      ec2_instance:
        state: absent
        region: '{{ ansible_ec2_placement_region }}'
        instance_ids: '{{ ami_instance.instances.0.instance_id }}'


    - name: 'Remove temporary key pair'
      ec2_key:
        name: '{{ build_tag }}'
        region: '{{ ansible_ec2_placement_region }}'
        state: absent

    - name: 'Delete private key file'
      file:
        path: '~/.ami/{{ build_tag }}.pem'
        state: absent
